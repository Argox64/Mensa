// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Recipe {
  id               String   @id @default(uuid()) @db.Uuid
  name             String
  description      String
  creatorId        String?  @db.Uuid
  content          Json
  tags             String[]
  totalCookingTime Int?
  difficulty       Int      @default(0) // 0 = very easy, 1 = easy, 2 = medium, 3 = hard, 4 = very hard
  imageUrl         String?
  likesCount       Int      @default(0)

  createdAt DateTime @default(now())

  PlanningEntries PlanningEntry[]
  comments       Comment[]
  Creator User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  Likes   Likes[]

  @@map("Recipe")
}

model PlanningEntry {
  id         Int      @id @default(autoincrement())
  userId     String   @db.Uuid
  recipeId   String   @db.Uuid
  mealType   String   @default("")
  date       DateTime
  nbPortions Int

  Recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Restrict)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("PlanningEntry")
}

model Plans {
  id           Int    @id @default(autoincrement())
  name         String
  description  String
  features     String[]
  monthlyPrice Int  @default(0)
  yearlyPrice  Int  @default(0)

  Subscriptions Subscriptions[]

  @@map("Plans")
}

model Subscriptions {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @db.Uuid
  planId          Int?
  billingCycle    BillingCycle
  startDate       DateTime
  stripeSubscriptionId String? @unique

  Plan            Plans?   @relation(fields: [planId], references: [id], onDelete: Restrict)
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])

  @@map("Subscriptions")
}

model Comment {
  id       String @id @default(uuid()) @db.Uuid
  userId   String @db.Uuid
  recipeId String @db.Uuid
  content  String @db.Text

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([recipeId])
}

model ShoppingAffiliation {
  id          String  @id @default(uuid()) @db.Uuid
  userId      String? @db.Uuid
  trackingUrl String
  amount      Float

  @@map("ShoppingAffiliation")
}

model User {
  id                 String                @id @db.Uuid //use UUID of supabase
  username           String
  dietaryPreferences String[]
  stripeCustomerId   String?
  notificationSettings NotificationSettings?

  // Relations
  createdRecipes    Recipe[]
  planningEntries   PlanningEntry[]
  subscriptions     Subscriptions[]
  comments          Comment[]
  likes             Likes[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("User")
}

model Likes {
  userId   String @db.Uuid
  recipeId String @db.Uuid
  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([userId, recipeId])
  
  @@map("Likes")
}


model NotificationSettings {
  id                String              @id @default(uuid()) @db.Uuid
  userId            String              @unique @db.Uuid
  emailEnabled      Boolean             @default(true)
  pushEnabled       Boolean             @default(true)
  weeklyDigest      Boolean             @default(true)
  newFeatures       Boolean             @default(true)
  
  // Relation
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("NotificationSettings")
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  CANCELED
  PAST_DUE
  TRIALING
  EXPIRED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethodType {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}
